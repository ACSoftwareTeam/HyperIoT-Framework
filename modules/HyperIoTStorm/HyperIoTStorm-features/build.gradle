apply plugin: 'com.github.lburgazzoli.karaf'

configurations {
    storm {
        transitive = false
    }

    storm_2_3 {
		transitive = false
	}

    storm_2_4 {
        transitive = false
    }

    stormTest {
        transitive = false
    }
}

dependencies {
	storm_2_3 'it.acsoftware.hyperiot.storm:HyperIoTStorm-bundles:'+project.version
    storm_2_4 'it.acsoftware.hyperiot.storm:HyperIoTStorm-2.4-bundles:'+project.version
    storm 'it.acsoftware.hyperiot.storm:HyperIoTStorm-api:'+project.version
    storm 'it.acsoftware.hyperiot.storm:HyperIoTStorm-service:'+project.version
}


karaf {
    features {
        // See section below for karaf 4 support if using 1.3.0
        xsdVersion  = '1.2.0'
        version     = '4.0.0' // Your project version
        description = 'Karaf features'

        // Include the current project, false by default
        includeProject = false

        // Add in extra repositories to the features xml file
        //Example:
        //repository "mvn:org.code-house.jackson/features/2.8.7/xml/features"

        feature {
            name        = 'hyperiot-storm'
            description = 'All HyperIoT HyperIoTStorm modules'

            configurations 'storm_2_3','storm'
        }

        feature {
            name        = 'hyperiot-storm-2.4'
            description = 'All HyperIoT HyperIoTStorm modules'

            configurations 'storm_2_4','storm'
        }

    }

    // Enable generation of Karaf Archive KAR based on features defined above.
    // To generate kar either use generateKar, assemble or install
    kar {
        // Optionally set the kar name, default is:
        //
        //     ${features.name}-${features.version}.kar
        //
        // Extension is automatically set to .kar
        archiveName = 'HyperIoTStorm'
    }
}


task buildHIT(type: GradleBuild) {

}

task buildFeatures(type: GradleBuild) {
	tasks = [ 'clean','generateFeatures','build','install' ]
}

task publishHIT(type: GradleBuild) {

}

task publishFeatures(type: GradleBuild) {
	tasks = [ 'clean','generateFeatures','build','install','publish' ]
}

def featureFile = 'build/karaf/features/'+project.name+'-'+project.version+'.xml'
publishing {
    publications {
        hyperiot(MavenPublication) {
            artifactId project.name
            artifact source: featureFile, classifier: 'features'
        }
    }
 }
